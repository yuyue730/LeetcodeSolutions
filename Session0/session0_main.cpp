// Leetcode Session 0 Problems main function
#include <iostream>
#include "session0_test.h"
using namespace std;

int main() {
    cout << "Leetcode Session 0 Problem Solution Application starts.\n";
    Session0Test * testObj = new Session0Test();
    cout << "\nTest for problems starts.\n";

    testObj->twoSum1Test();
    testObj->addTwoNumbers2Test();
    testObj->lengthOfLongestSubstring3Test();
    testObj->findMedianSortedArrays4Test();
    testObj->longestPalindrome5Test();
    testObj->convert6Test();
    testObj->reverse7Test();
    testObj->myAtoi8Test();
    testObj->isPalindrome9Test();
    testObj->isMatch10Test();
    testObj->maxArea11Test();
    testObj->intToRoman12Test();
    testObj->romanToInt13Test();
    testObj->longestCommonPrefix14Test();
    testObj->threeSum15Test();
    testObj->threeSumClosest16Test();
    testObj->letterCombinations17Test();
    testObj->fourSum18Test();
    testObj->removeNthFromEnd19Test();
    testObj->isValid20Test();
    testObj->mergeTwoLists21Test();
    testObj->generateParenthesis22Test();
    testObj->mergeKLists23Test();
    testObj->swapPairs24Test();
    testObj->reverseKGroup25Test();
    testObj->removeDuplicates26Test();
    testObj->removeElement27Test();
    testObj->strStr28Test();
    testObj->divide29Test();
    testObj->findSubstring30Test();
    testObj->nextPermutation31Test();
    testObj->longestValidParentheses32Test();
    testObj->search33Test();
    testObj->searchRange34Test();
    testObj->searchInsert35Test();
    testObj->isValidSudoku36Test();
    testObj->solveSudoku37Test();
    testObj->countAndSay38Test();
    testObj->combinationSum39Test();
    testObj->combinationSum2_40Test();
    testObj->firstMissingPositive41Test();
    testObj->trap42Test();
    testObj->multiply43Test();
    testObj->isMatch44Test();
    testObj->jump45Test();
    testObj->permute46Test();
    testObj->permuteUnique47Test();
    testObj->rotate48Test();
    testObj->groupAnagrams49Test();
    testObj->myPow50Test();
    testObj->solveNQueens51Test();
    testObj->totalNQueens52Test();
    testObj->maxSubArray53Test();
    testObj->spiralOrder54Test();
    testObj->canJump55Test();
    testObj->merge56Test();
    testObj->insert57Test();
    testObj->lengthOfLastWord58Test();
    testObj->generateMatrix59Test();
    testObj->getPermutation60Test();
    testObj->rotateRight61Test();
    testObj->uniquePaths62Test();
    testObj->uniquePathsWithObstacles63Test();
    testObj->minPathSum64Test();
    testObj->isNumber65Test();
    testObj->plusOne66Test();
    testObj->addBinary67Test();
    testObj->fullJustify68Test();
    testObj->mySqrt69Test();
    testObj->climbStairs70Test();
    testObj->simplifyPath71Test();
    testObj->minDistance72Test();
    testObj->setZeroes73Test();
    testObj->searchMatrix74Test();
    testObj->sortColors75Test();
    testObj->minWindow76Test();
    testObj->combine77Test();
    testObj->subsets78Test();
    testObj->exist79Test();
    testObj->removeDuplicates80Test();
    testObj->search81Test();
    testObj->deleteDuplicates82Test();
    testObj->deleteDuplicates83Test();
    testObj->largestRectangleArea84Test();
    testObj->maximalRectangle85Test();
    testObj->partition86Test();
    testObj->isScramble87Test();
    testObj->merge88Test();
    testObj->grayCode89Test();
    testObj->subsetsWithDup90Test();
    testObj->numDecodings91Test();
    testObj->reverseBetween92Test();
    testObj->restoreIpAddresses93Test();
    testObj->inorderTraversal94Test();
    testObj->generateTrees95Test();
    testObj->numTrees96Test();
    testObj->isInterleave97Test();
    testObj->isValidBST98Test();
    testObj->recoverTree99Test();
    testObj->isSameTree100Test();

    return 0;
}
